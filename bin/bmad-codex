#!/usr/bin/env node

/**
 * BMAD Invisible Orchestrator - Codex Interface
 * Launches Codex CLI with MCP server and orchestrator agent
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Get paths
const rootDir = path.join(__dirname, '..');
const mcpConfigPath = path.join(rootDir, 'mcp', 'bmad-config.json');
const orchestratorPath = path.join(rootDir, 'agents', 'invisible-orchestrator.md');

// Check if files exist
if (!fs.existsSync(mcpConfigPath)) {
  console.error('Error: MCP config not found. Run: npm run build:mcp');
  process.exit(1);
}

if (!fs.existsSync(orchestratorPath)) {
  console.error('Error: Orchestrator agent not found');
  process.exit(1);
}

// Read orchestrator content and strip YAML frontmatter
let orchestratorContent = fs.readFileSync(orchestratorPath, 'utf8');

// Remove YAML frontmatter (everything between --- markers)
orchestratorContent = orchestratorContent.replace(/^---\n[\s\S]*?\n---\n/, '');

// Normalise CLI arguments (support `start` as default command)
let userArgs = process.argv.slice(2);
if (userArgs.length > 0 && ['start', 'chat', 'run'].includes(userArgs[0])) {
  userArgs = userArgs.slice(1);
}

// Build Codex command
const codexArgs = [
  '--mcp-config',
  mcpConfigPath,
  '--append-system-prompt',
  orchestratorContent,
  ...userArgs,
];

console.log('ðŸŽ¯ Starting BMAD Invisible Orchestrator with Codex...');
console.log('ðŸ“¡ MCP Server: bmad-invisible-orchestrator');
console.log('ðŸ¤– Agent: Invisible BMAD Orchestrator');
console.log('ðŸ’¬ Type your project idea to begin!\n');

// Launch Codex CLI
const codex = spawn('codex', codexArgs, {
  stdio: 'inherit',
  shell: false,
});

codex.on('error', (error) => {
  console.error('Error launching Codex CLI:', error.message);
  console.error('\nMake sure Codex CLI is installed and in your PATH');
  console.error('Install: https://platform.openai.com/docs/guides/codex');
  process.exit(1);
});

codex.on('exit', (code) => {
  process.exit(code || 0);
});
