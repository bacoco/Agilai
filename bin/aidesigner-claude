#!/usr/bin/env node

/**
 * AiDesigner Orchestrator - Chat Interface
 * Launches Claude CLI with MCP server and orchestrator agent
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const { runIntegrityPreflight } = require('../common/utils/integrity');
const { ensureCliBinary } = require('../common/utils/cli-provisioning');
const { buildAssistantSpawnEnv } = require('../common/utils/assistant-env');

// Get paths
const rootDir = path.join(__dirname, '..');
runIntegrityPreflight(rootDir, { silentOnMatch: true });
const mcpConfigDir = path.join(rootDir, 'mcp');
const newMcpConfigPath = path.join(mcpConfigDir, 'aidesigner-config.json');
const legacyMcpConfigPath = path.join(mcpConfigDir, 'bmad-config.json');
let mcpConfigPath = newMcpConfigPath;
let usingLegacyMcpConfig = false;
const orchestratorPath = path.join(rootDir, 'agents', 'invisible-orchestrator.md');

// Resolve MCP config path with fallback logic
if (fs.existsSync(newMcpConfigPath)) {
  // Use new config if it exists
  mcpConfigPath = newMcpConfigPath;
  // Warn if both configs exist
  if (fs.existsSync(legacyMcpConfigPath)) {
    console.warn('ℹ️  Found legacy mcp/bmad-config.json alongside new config. You can safely remove the legacy file.');
  }
} else if (fs.existsSync(legacyMcpConfigPath)) {
  // Fall back to legacy config if new config doesn't exist
  // Validate legacy config has the expected structure
  try {
    const legacyConfig = JSON.parse(fs.readFileSync(legacyMcpConfigPath, 'utf8'));
    if (!legacyConfig.mcpServers || typeof legacyConfig.mcpServers !== 'object') {
      throw new Error('Invalid MCP config structure: missing mcpServers object');
    }
    if (Object.keys(legacyConfig.mcpServers).length === 0) {
      throw new Error('Invalid MCP config structure: no servers configured');
    }
    usingLegacyMcpConfig = true;
    mcpConfigPath = legacyMcpConfigPath;
  } catch (error) {
    if (error instanceof SyntaxError) {
      console.error(`Error: Legacy config file ${legacyMcpConfigPath} contains invalid JSON.`);
      console.error(`Parse error: ${error.message}`);
    } else {
      console.error(`Error: Legacy config file ${legacyMcpConfigPath} is invalid or corrupted.`);
      console.error(error.message);
    }
    console.error('Expected mcp/aidesigner-config.json. Run: npm run build:mcp');
    process.exit(1);
  }
} else {
  // Neither config exists
  console.error('Error: MCP config not found. Expected mcp/aidesigner-config.json. Run: npm run build:mcp');
  process.exit(1);
}

if (!fs.existsSync(orchestratorPath)) {
  console.error('Error: Orchestrator agent not found');
  process.exit(1);
}

// Read orchestrator content and strip YAML frontmatter
let orchestratorContent = fs.readFileSync(orchestratorPath, 'utf8');

// Remove YAML frontmatter (everything between --- markers)
orchestratorContent = orchestratorContent.replace(/^---\n[\s\S]*?\n---\n/, '');

async function main() {
  const claudeCheck = await ensureCliBinary({
    rootDir,
    binaryName: 'claude',
    friendlyName: 'Claude Code CLI',
    installGuide: {
      autoInstallCommand:
        'npm exec --yes @anthropic-ai/claude-code@latest -- claude --help',
      manualSteps: [
        {
          label: 'Homebrew (macOS/Linux)',
          command: 'brew install anthropic-ai/anthropic/claude',
        },
        {
          label: 'Official installer & docs',
          url: 'https://claude.ai/code',
        },
      ],
    },
  });

  if (!claudeCheck.ok) {
    process.exit(claudeCheck.exitCode ?? 1);
  }

  // Build Claude command
  const claudeArgs = [
    '--mcp-config', mcpConfigPath,
    '--append-system-prompt', orchestratorContent,
  ];

  // Add any additional args from user
  const userArgs = process.argv.slice(2);
  if (userArgs.length > 0) {
    claudeArgs.push(...userArgs);
  }

  if (usingLegacyMcpConfig) {
    console.warn('⚠️  Using legacy MCP config mcp/bmad-config.json. Please migrate to mcp/aidesigner-config.json.');
  }

  console.log('🎯 Starting AiDesigner Orchestrator...');
  console.log('📡 MCP Server: aidesigner-orchestrator');
  console.log('🤖 Agent: AiDesigner Orchestrator');
  console.log('💬 Type your project idea to begin!\n');

  const claudeBinary = claudeCheck.binaryPath || 'claude';
  const { env: claudeEnv, isGlm } = buildAssistantSpawnEnv();
  const mergedEnv = { ...process.env, ...claudeEnv };

  if (process.env.AIDESIGNER_ASSISTANT_PROVIDER && !('AIDESIGNER_ASSISTANT_PROVIDER' in claudeEnv)) {
    mergedEnv.AIDESIGNER_ASSISTANT_PROVIDER = process.env.AIDESIGNER_ASSISTANT_PROVIDER;
  }

  if (process.env.BMAD_ASSISTANT_PROVIDER && !('BMAD_ASSISTANT_PROVIDER' in claudeEnv)) {
    mergedEnv.BMAD_ASSISTANT_PROVIDER = process.env.BMAD_ASSISTANT_PROVIDER;
  }

  if (isGlm) {
    console.log('🌐 GLM mode active: routing Claude CLI through configured GLM endpoint.');
  }

  // Launch Claude CLI
  const claude = spawn(claudeBinary, claudeArgs, {
    stdio: 'inherit',
    shell: false, // Don't use shell to avoid parsing issues with multi-line content
    env: mergedEnv,
  });

  claude.on('error', (error) => {
    console.error('Error launching Claude CLI:', error.message);
    console.error(
      '\nClaude CLI is required. See https://claude.ai/code for installation instructions.'
    );
    process.exit(1);
  });

  claude.on('exit', (code) => {
    process.exit(code || 0);
  });
}

main().catch((error) => {
  console.error('Unexpected error while starting Claude chat:', error);
  process.exit(1);
});
