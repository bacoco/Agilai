#!/usr/bin/env node

/**
 * BMAD Invisible Orchestrator - Chat Interface
 * Launches Claude CLI with MCP server and orchestrator agent
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const { runIntegrityPreflight } = require('../common/utils/integrity');
const { ensureCliBinary } = require('../common/utils/cli-provisioning');
const { buildAssistantSpawnEnv } = require('../common/utils/assistant-env');

// Get paths
const rootDir = path.join(__dirname, '..');
runIntegrityPreflight(rootDir, { silentOnMatch: true });
const mcpConfigPath = path.join(rootDir, 'mcp', 'bmad-config.json');
const orchestratorPath = path.join(rootDir, 'agents', 'invisible-orchestrator.md');

// Check if files exist
if (!fs.existsSync(mcpConfigPath)) {
  console.error('Error: MCP config not found. Run: npm run build:mcp');
  process.exit(1);
}

if (!fs.existsSync(orchestratorPath)) {
  console.error('Error: Orchestrator agent not found');
  process.exit(1);
}

// Read orchestrator content and strip YAML frontmatter
let orchestratorContent = fs.readFileSync(orchestratorPath, 'utf8');

// Remove YAML frontmatter (everything between --- markers)
orchestratorContent = orchestratorContent.replace(/^---\n[\s\S]*?\n---\n/, '');

async function main() {
  const claudeCheck = await ensureCliBinary({
    rootDir,
    binaryName: 'claude',
    friendlyName: 'Claude Code CLI',
    installGuide: {
      autoInstallCommand:
        'npm exec --yes @anthropic-ai/claude-code@latest -- claude --help',
      manualSteps: [
        {
          label: 'Homebrew (macOS/Linux)',
          command: 'brew install anthropic-ai/anthropic/claude',
        },
        {
          label: 'Official installer & docs',
          url: 'https://claude.ai/code',
        },
      ],
    },
  });

  if (!claudeCheck.ok) {
    process.exit(claudeCheck.exitCode ?? 1);
  }

  // Build Claude command
  const claudeArgs = [
    '--mcp-config', mcpConfigPath,
    '--append-system-prompt', orchestratorContent,
  ];

  // Add any additional args from user
  const userArgs = process.argv.slice(2);
  if (userArgs.length > 0) {
    claudeArgs.push(...userArgs);
  }

  console.log('🎯 Starting BMAD Invisible Orchestrator...');
  console.log('📡 MCP Server: bmad-invisible-orchestrator');
  console.log('🤖 Agent: Invisible BMAD Orchestrator');
  console.log('💬 Type your project idea to begin!\n');

  const claudeBinary = claudeCheck.binaryPath || 'claude';
  const { env: claudeEnv, isGlm } = buildAssistantSpawnEnv();

  if (isGlm) {
    console.log('🌐 GLM mode active: routing Claude CLI through configured GLM endpoint.');
  }

  // Launch Claude CLI
  const claude = spawn(claudeBinary, claudeArgs, {
    stdio: 'inherit',
    shell: false, // Don't use shell to avoid parsing issues with multi-line content
    env: claudeEnv,
  });

  claude.on('error', (error) => {
    console.error('Error launching Claude CLI:', error.message);
    console.error(
      '\nClaude CLI is required. See https://claude.ai/code for installation instructions.'
    );
    process.exit(1);
  });

  claude.on('exit', (code) => {
    process.exit(code || 0);
  });
}

main().catch((error) => {
  console.error('Unexpected error while starting Claude chat:', error);
  process.exit(1);
});
